package com.lzzyyy.xxk.user.web.struts2.action;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.security.auth.login.LoginException;
import javax.servlet.http.Cookie;



import com.lzzyyy.xxk.user.exception.LoginFaileException;
import com.lzzyyy.xxk.user.pojo.User;
import com.lzzyyy.xxk.user.pojo.UserTeam;
import com.lzzyyy.xxk.user.service.UserService;
import com.lzzyyy.xxk.user.service.UserTeamService;
import com.lzzyyy.xxk.user.utils.Constant;
import com.lzzyyy.xxk.user.utils.PromptUtil;
import com.lzzyyy.xxk.user.utils.SignUtil;
import com.lzzyyy.xxk.user.web.vo.SysUserVo;

public class UserAction extends BaseAction {
	private UserService userService;
	private UserTeamService teamService;
	private User user;
	private UserTeam team;
	private String teamName;
	private List<UserTeam> teams;

	public String getTeamName() {
		return teamName;
	}

	public void setTeamName(String teamName) {
		this.teamName = teamName;
	}

	public UserTeam getTeam() {
		return team;
	}

	public void setTeam(UserTeam team) {
		this.team = team;
	}

	public List<UserTeam> getTeams() {
		return teams;
	}

	public void setTeams(List<UserTeam> teams) {
		this.teams = teams;
	}

	public UserTeamService getTeamService() {
		return teamService;
	}

	public void setTeamService(UserTeamService teamService) {
		this.teamService = teamService;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public UserService getUserService() {
		return userService;
	}

	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	public String toAddUser() {
		List<UserTeam> teams = this.frindAllTeam();
		this.setTeams(teams);
		return "toAddUser";

	}

	/**
	 * 生成对话框并跳转到设定的URL
	 * 
	 * @param message
	 * @param url
	 */
	public void print(String message, String url) {
		try {
			PromptUtil.print(getResponse(), message, url);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public String deleteUser() {

		return "";
	}
	
	public String login() throws Exception{
        //先去cookie找用户
		/*Cookie[] c=getRequest().getCookies();  
	    for (int i = 0; i < c.length; i++) {
			 if( c[i].getName().equals("userNmae")){
				 user.setUserName(c[i].getName());
			 }
			 if( c[i].getName().equals("userPwd")){
				 user.setUserPwd(c[i].getName());
			 }
		}
	    */
		User u = userService.frindByUserId(user);
		String vCodeInSession = (String) getSession()
				.getAttribute("validateCode");// 画出验证码的同时验证码被存入session
		String vCodeInPageSubmit = getRequest()
				.getParameter("validateCode");// 用户提交的验证码

		if (null != vCodeInSession && vCodeInSession.equals(vCodeInPageSubmit)) {
			getSession().removeAttribute("validateCode");
			
			
			if(null!=u){
				
				//如果用户点击了“记住我”添加用户信息到cookie中
				String isRemember= getRequest().getParameter("remember");
				if(null!=isRemember&&!"".equals(isRemember)){
					Cookie cookie = new Cookie(Constant.USER_NAME_IN_COOKIE, user.getUserName());
					getResponse().addCookie(cookie); 
					
					Cookie ctype = new Cookie(Constant.USER_PWD_IN_COOKIE,user.getUserPwd());
					getResponse().addCookie(ctype);
					
					getSession().setAttribute(Constant.CURRENT_USER, user);
				}
				return "loginSuccess";
			}else{
				
				throw new LoginException("登陆出错，用户或密码错误");
			}
			
		}else{
			
			throw new LoginException("验证码错误");
		}
		
	}

	/**
	 * 查到所有的用户分组
	 * 
	 * @return
	 */
	public List<UserTeam> frindAllTeam() {

		return teamService.findAllTeam();
	}

	public UserTeam findTeam() {
		UserTeam ut = teamService.findTime(this.getTeamName());
		return ut;
	}

	/**
	 * 添加一个用户
	 * 
	 * @return
	 */
	public void addUser() {
		try {
			User u = new User();
			User voU = this.getUser();// 从页面拿到的user
			u.setAddDate(new Date());
			u.setRemark(voU.getRemark());
			u.setUserName(voU.getUserName());
			u.setUserRealName(voU.getUserRealName());
			u.setPictureUrl("待添加");//次功能待添加，先传个字符串
			u.setUserPwd(voU.getUserPwd());
			UserTeam team = null;
			team = findTeam();
			if (null != team) {
				u.setTeam(team);
				userService.addUser(u);
			
				
				this.print("添加用户成功", "user/userInfo_toAddUser.action");
				
				
			} else {

				this.print("添加失败", "user/userInfo_toAddUser.action");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	

}
